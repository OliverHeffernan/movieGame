<template>
	<div id="phoneContainer" @scroll="loadMore">
		<TutInfo />
		<!--<div v-if="movies.length == 0">Loading</div>-->
		<LoadingScreen :open="movies.length == 0" />
		<MovieContainer v-for="(movie, n) in movies" :key="n" :index="n - 1" :movie="movie.movie" />
		<!--
<MovieContainer :movie="data.data[0].movie" :index="0" :credits="{cast: data.data[0].cast, crew: data.data[0].crew}" />
<MovieContainer :movie="data.data[1].movie" :index="1" :credits="{cast: data.data[1].cast, crew: data.data[1].crew}" />
-->
	</div>
</template>

<script setup>
import "./styles/main.css";
//import SampleData from "./classes/sampleData.js";
import MovieContainer from "./components/MovieContainer.vue";
import TutInfo from "./components/TutInfo.vue";
import LoadingScreen from "./components/LoadingScren.vue";
//const data = new SampleData();

import { ref, onMounted } from "vue";

//let page = await getPage().results;
let page = [];
const movies = ref([]);


let loadings = 0;
let fetching = false;

onMounted(async () => {
	const vh = window.innerHeight * 0.01;
	document.documentElement.style.setProperty('--vh', `${vh}px`);
	for (let i = 0; i < 10; i++) {
		await addMovie();
	}
});

async function addMovie() {
	await checkForMorePages();

	let index = getRandomInt(0, page.length - 1);

	let movie = page[index];
	page.splice(index, 1);

	await checkForMorePages();
	while (movie == null || (movie.success == false || movie.adult || movie.poster_path == null || movie.original_language != "en" || movie.vote_count < 1500 || parseInt(movie.release_date.split("-")[0]) < 1965 )) {
		index = getRandomInt(0, page.length);
		movie = page[index];

		page.splice(index, 1);
		await checkForMorePages();
	}

	/*let credits = await fetchCredits(movie.id);

	let attempts = 0;
	const maxAttempts = 5;
	while (credits == "ERROR" && attempts < maxAttempts) {
		credits = await fetchCredits(movie.id);
		attempts++;
	}
	*/
	
	movies.value.push({
		movie: movie,
		credits: movie.credits
	});
}

async function checkForMorePages() {
	if (page.length == 0) {
		const temp = await getPage();
		page = temp.results;
		console.log(page);
	}
}

async function loadMore() {
	if (loadings == 0 && !fetching) {
		//numLoaded.value++;
		await addMovie();
		loadings++;
		setTimeout(() => {
			loadings--;
		}, 2000);

	}
}

async function fetchResults() {
	fetching = true;
	try {
		const controller = new AbortController();
		const timeout = 10000;
		const timeoutId = setTimeout(() => controller.abort(), timeout);

		//const response = await fetch('https://192.168.68.59:8443/movie', {
		console.log("fetching");
		const response = await fetch('https://settling-donkey-brightly.ngrok-free.app/movie', {
			method: 'GET',
			signal: controller.signal,
			headers: {
				"ngrok-skip-browser-warning": "true"
			}
		});

		clearTimeout(timeoutId);

		if (!response.ok) {
			throw new Error(`HTTP error! Status: ${response.status}`);
		}

		const text = await response.text();
		//console.log(text);
		fetching = false;
		return JSON.parse(text);
	} catch (error) {
		console.error('Error fetching result:', error);
		//return "ERROR";
		//connection = false;
		//console.log("connection failed");
		//sampleNumber = getRandomInt(0, data.data.length - 1);
		//console.log(sampleNumber);
		//return data.data[getRandomInt(0, data.data.length - 1)].movie;
		fetching = false;
		return "ERROR";
	}
}

function getRandomInt(a, b) {
	const min = Math.ceil(Math.min(a, b));
	const max = Math.floor(Math.max(a, b));
	return Math.floor(Math.random() * (max - min + 1)) + min;
}

/*
async function getPage() {
	let _page = await fetchResults();
	console.log(_page);
	while (_page == "ERROR" || !_page || !_page.results) {
		_page = await fetchResults();
	}
	return _page;
}
*/
async function getPage() {
	let _page = await fetchResults();
	while (
		_page === "ERROR" ||
		!_page ||
		typeof _page !== "object" ||
		!Array.isArray(_page.results)
	) {
		console.warn("getPage: retrying due to invalid data", _page);
		_page = await fetchResults();
	}
	console.log("page loaded");

	return _page;
}

/*
async function fetchCredits(id) {
	try {
		console.log("fetching");
		const response = await fetch('https://settling-donkey-brightly.ngrok-free.app/credits/' + id, {
			method: 'GET',
			headers: {
				"ngrok-skip-browser-warning": "true"
			}
		});

		if (!response.ok) {
			throw new Error(`HTTP error! Status: ${response.status}`);
		}

		const text = await response.text();

		return JSON.parse(text.substring(8));
	} catch (error) {
		console.log("fetched error");
		return "ERROR";
	}
}
*/
</script>
